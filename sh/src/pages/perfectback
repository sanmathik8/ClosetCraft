const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// ✅ MongoDB Connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("✅ Connected to MongoDB"))
.catch((err) => console.error("❌ MongoDB connection error:", err));

// ✅ API Endpoint: Fetch paginated items from a dynamic collection
app.get("/api/category/:name", async (req, res) => {
  const collectionName = req.params.name;
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 12;
  const skip = (page - 1) * limit;

  try {
    const collection = mongoose.connection.db.collection(collectionName);

    // ✅ Ensure consistent ordering
    const data = await collection
      .find({})
      .sort({ _id: 1 }) // Sort by _id for consistent order
      .skip(skip)
      .limit(limit)
      .toArray();

    const total = await collection.countDocuments();

    res.json({
      data,
      total,
      currentPage: page,
      totalPages: Math.ceil(total / limit),
    });
  } catch (err) {
    console.error(`❌ Error fetching from collection "${collectionName}":`, err.message);
    res.status(500).json({ error: `Failed to fetch data from "${collectionName}" collection` });
  }
});

// ✅ Start the server
app.listen(PORT, () => {
  console.log(`🚀 Server is running on http://localhost:${PORT}`);
});
